import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

# Load Iris dataset
iris = load_iris()
data = pd.DataFrame(iris.data, columns=iris.feature_names)

# Use only one feature for simplicity
X = data[['sepal width (cm)']]
y = data['sepal length (cm)']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Locally Weighted Regression function
def locally_weighted_regression(X_train, y_train, X_test, tau=1.0):
    X_train_np = X_train.to_numpy()
    y_train_np = y_train.to_numpy()
    X_test_np = X_test.to_numpy()

    y_pred = np.zeros(X_test.shape[0])
    for i in range(X_test.shape[0]):
        diff = X_train_np - X_test_np[i]
        weights = np.exp(-np.sum(diff ** 2, axis=1) / (2 * tau ** 2))
        W = np.diag(weights)
        XTWX = X_train_np.T @ W @ X_train_np
        XTWy = X_train_np.T @ W @ y_train_np
        theta = np.linalg.pinv(XTWX) @ XTWy
        y_pred[i] = X_test_np[i] @ theta
    return y_pred

# Perform prediction
y_pred = locally_weighted_regression(X_train, y_train, X_test, tau=1.0)

# Sort test data for smoother curve
sorted_indices = X_test['sepal width (cm)'].argsort()
X_test_sorted = X_test.iloc[sorted_indices]
y_pred_sorted = y_pred[sorted_indices]

# Plotting
plt.figure(figsize=(8, 5))
plt.scatter(X_train, y_train, color='blue', label='Training data')
plt.scatter(X_test, y_test, color='red', label='Test data')
plt.plot(X_test_sorted, y_pred_sorted, color='green', label='Locally Weighted Regression')
plt.xlabel('Sepal Width (cm)')
plt.ylabel('Sepal Length (cm)')
plt.legend()
plt.title('Locally Weighted Regression on Iris Dataset')
plt.grid(True)
plt.tight_layout()
plt.show()
